·StringBuffer类的对象调用toString方法将装换成String类型

·String类没有append方法，StringBuffer类有
append方法的作用是在一个StringBuffer对象后面追加字符串。
例如StringBuffer s = new StringBuffer("Hello");s.append("World");则s的内容是HelloWorld

·引用类型只有String可以直接复制，其他的都要new出来
所以可以直接将字符串“test”赋值给声明的String类和StringBuffer类的变量是错误的

·StringBuffer类可以直接改变它的内容，不用重新分配地址；String对象/实例是不可以被改变的

·String是对象不是原始类型，是不可变对象，一旦被创建，就不能修改它的值
对于已存在的String对象的修改都是重新创建一个新的对象
然后把新的值保存进去，String类是final类，即不能被继承

·StringBuffer类是一个可变对象，修改时不会重新建立对象
只能通过构造函数来建立StringBuffer sb = new StringBuffer（）；

·字符串连接操作中StringBuffer的效率比String高

形参只能用final修饰符修饰

·管道是一种半双工的通信方式，数据只能单向流动，而且在具有亲缘关系的进程间流动

·ArrayList（）构造一个初始容量为10的控列表

·ArrayList（Collection<？ extends E>c）构造一个包含指定collection的元素列表
这些元素是按照collection的迭代器返回他们的顺序排列的

·ArrayList（int initialCapacity）构造一个具有指定初始容量得到空列表

·getParameter（）是获取POST/GET传递的参数的值

·getInitParameter获取Tomcat的server。xml中设置Context的初始化参数

·geiAttribute是获取对象容器中的数据值

java.awt： 包含构成抽象窗口工具集的多个类，用来构建和管理应用程序的图形用户界面


java.lang： 提供java编成语言的程序设计的基础类


java.io：　 包含提供多种输出输入功能的类，


java.net：　 包含执行与网络有关的类，如URL，SCOKET，SEVERSOCKET，


java.applet： 包含java小应用程序的类


java.util：　 包含一些实用性的类


  方法名。Java 技术允许使用 finalize()
  方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。
  它是在Object 类中定义的，因此所有的类都继承了它。子类覆盖 finalize()
  方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。
  Java中所有类都从Object类中继承finalize()方法。
  当垃圾回收器(garbage
  colector)决定回收某对象时，就会运行该对象的finalize()方法。

  1、类变量的调用：（1）静态、非静态方法中，可以直接调用。

  2、成员变量的调用有2种方法：
  （1）非静态方法中，可以通过this关键字直接调用。因为成员变量的初始化时间先于类的构造函数执行前,自然保证了成员变量已经被赋值。
  （2）静态方法中，先实例化类，利用实例化类的引用才能调用。

  3、this关键字：（1）不能在静态方法中使用。

在JAVA中，假设A有构造方法A(int a)，则在类A的其他构造方法中调用该构造方法的语句格式是：this(x)

多态，意味着一个对象有着多重特征，可以在特定的情况下，表现不同的状态，从而对应着不同的属性和方法。
动态绑定，是指在执行期间判断所引用对象的实际类型，
根据其实际的类型调用其相应的方法。 作用消除类型之间的耦合关系。

java中，String内部是由char【】实现，不过不用\0结尾

字符串比较使用equals()方法

char储存的是unicode码，不仅可以存储ascII，汉字也可以

equals和==比较的都是地址，只有String的equals重写了，比较内容

&&前面错误即不去判断后面的对错
















